%
%    If this code is used in a publication, please cite the manuscript:
%    "Electrical stimulation of temporal, limbic circuitry produces multiple
%    distinct responses in human ventral temporal cortex"
%    by H Huang, NM Gregg, G Ojeda Valencia, BH Brinkmann, BN Lundstrom,
%    GA Worrell, KJ Miller, and D Hermes.
%
%    VTCBPC manuscript package: plot positions to slices generated by
%    sliceGUI.m in the SEEGView package
%    Copyright (C) 2022  Harvey Huang
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <https://www.gnu.org/licenses/>.
%
function addSliceStims(handles, locs, wts, cmap, optsIn)
    
    if nargin < 4 || isempty(cmap), cmap = get(0, 'DefaultAxesColorOrder'); end
    if nargin < 3 || isempty(wts), wts = ones(size(locs, 1), 1); end % same weights
    if size(wts, 2) == 1, wts = [wts, ones(size(wts, 1), 1)]; end % add second column (group identity of each stim site)
    
    assert(size(wts, 1) == size(locs, 1), 'Locs and wts need to have the same number of rows'); 
    
    % configure plotting options
    opts.clip = max(wts(:, 1)); % just maximum weight by default
    opts.szrng = [2, 10];
    opts.cscale = 0.5;
    opts.marker = 'o';
    if exist('optsIn', 'var') && isa(optsIn, 'struct')
        inFields = fieldnames(optsIn);
        for ii = 1:length(inFields) % make case insensitive
            optsIn.(lower(inFields{ii})) = optsIn.(inFields{ii});
        end

        if isfield(optsIn, 'clip'), opts.clip = optsIn.clip; end
        if isfield(optsIn, 'szrng'), opts.szrng = optsIn.szrng; end
        if isfield(optsIn, 'cscale'), opts.cscale = optsIn.cscale; end
        if isfield(optsIn, 'marker'), opts.marker = optsIn.marker; end
    end
    
    % configure minimum colors
    cmapMin = cmap + (ones(size(cmap)) - cmap)*opts.cscale; % min color is between max color and white
    
    % clip weights
    wts(:, 1) = wts(:, 1)/opts.clip; % scale to 1 maximum
    wts(wts(:, 1) > 1, 1) = 1;
    wts(wts(:, 1) < 0, 1) = 0; % no negatives allowed
    
    hold(handles.axA, 'on');
    hold(handles.axS, 'on');
    
    for ii = 1:size(locs, 1) % iterate through sites to plot
        
        if isnan(wts(ii, 1)) || any(isnan(locs(ii, :))), continue; end % weight or location missing
        
        colCurr = cmapMin(wts(ii, 2), :) - (cmapMin(wts(ii, 2), :) - cmap(wts(ii, 2), :))*wts(ii, 1);
        
        % axial slice
        if abs(locs(ii, 3) - handles.f.UserData.zValue) < handles.f.UserData.elecWidth
            plot(handles.axA, locs(ii, 1), locs(ii, 2), opts.marker, ...
            'MarkerSize', (opts.szrng(2)-opts.szrng(1))*wts(ii, 1) + opts.szrng(1), ...
            'MarkerEdgeColor', 'w', ...
            'MarkerFaceColor', colCurr);
        end
        
    
        % sagittal slice
        if abs(locs(ii, 1) - handles.f.UserData.xValue) < handles.f.UserData.elecWidth
            plot(handles.axS, locs(ii, 2), locs(ii, 3), opts.marker, ...
            'MarkerSize', (opts.szrng(2)-opts.szrng(1))*wts(ii, 1) + opts.szrng(1), ...
            'MarkerEdgeColor', 'w', ...
            'MarkerFaceColor', colCurr);
        end
        
    end
    
    %'MarkerEdgeColor', cmap(wts(ii, 2), :), ...
    
    hold(handles.axA, 'off');
    hold(handles.axS, 'off');
        
end